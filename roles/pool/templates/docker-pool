#!/bin/sh
#
# This file is managed by Puppet and local changes
# may be overwritten
#
#    /etc/rc.d/init.d/<servicename>
#
#    Daemon for pool
#
# chkconfig: 2345 97 15
# description: Docker container for pool

### BEGIN INIT INFO
# Provides:       docker-pool
# Required-Start: $network docker
# Required-Stop: $network docker
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop:  0 1 6
# Short-Description: start and stop docker container for pool
# Description: Docker container for pool
### END INIT INFO

if [ -e /etc/init.d/functions ]; then
    . /etc/init.d/functions
elif [ -e /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
    failure() {
        log_failure_msg "$@"
        return 1
    }
    success() {
        log_success_msg "$@"
        return 0
    }
else
    failure() {
        echo "fail: $@" >&2
        exit 1
    }
    success() {
        echo "success: $@" >&2
        exit 0
    }
fi

export HOME=/root/
docker="/usr/bin/docker"
prog="docker-pool"
if [ -d /var/lock/subsys ]; then
    lockfile="/var/lock/subsys/$prog"
else
    unset lockfile
fi

start() {
    [ -x $docker ] || exit 5

    if [ "true" = "$($docker inspect --format='{{.State.Running}}' pool)" ]; then
       failure
       printf "Container pool is still running.\n"
       exit 7
    fi

    printf "Starting $prog:\t"
    $docker rm pool >/dev/null 2>&1
    $docker run \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -p 0.0.0.0:80:80 \
        --env MAX_CONTAINERS={{ max_containers }} \
        --env PREVIEW_REPOSITORY_URL={{ preview_repository_url }} \
        --env POOL_BASE_DOMAIN={{ pool_base_domain }} \
        --name pool \
        pool-server

    retval=$?
    echo
    if [ $retval -eq 0 ]; then
        success
    else
        failure
    fi
}

stop() {
    echo -n "Stopping $prog: "
    $docker stop pool
    $docker rm pool
    return $?
}

clean() {
    if ! [ -f $cidfile ]; then
        failure
        echo
        printf "$cidfile does not exist.\n"
    else
        cid="$(cat $cidfile)"
	rm $cidfile
        $docker rm -f $cid
        retval=$?
        return $retval
    fi
}

case "$1" in
    start)
    start
    ;;
    stop)
    stop
    ;;
    status)
    if [ "true" = "$($docker inspect --format='{{.State.Running}}' pool)" ]; then
        echo $prog is running
        exit 0
    else
        echo $prog not running
        exit 1
    fi
    ;;
    restart|reload)
    stop
    start
    ;;
    clean)
    clean
    ;;
    cleanRestart)
    stop
    clean
    start
    ;;
    condrestart)
    [ -f /var/lock/subsys/$prog ] && restart || :
    ;;
    *)
    echo "Usage: $0 [start|stop|status|reload|restart|probe|clean|cleanRestart]"
    exit 1
    ;;
esac
exit $?
